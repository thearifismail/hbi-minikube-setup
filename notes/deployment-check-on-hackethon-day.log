$ minikube start
😄  minikube v1.18.1 on Darwin 11.5.2
✨  Using the hyperkit driver based on user configuration
👍  Starting control plane node minikube in cluster minikube
🔥  Creating hyperkit VM (CPUs=4, Memory=8192MB, Disk=36864MB) ...
🎉  minikube 1.22.0 is available! Download it: https://github.com/kubernetes/minikube/releases/tag/v1.22.0
💡  To disable this notice, run: 'minikube config set WantUpdateNotification false'

🐳  Preparing Kubernetes v1.20.2 on Docker 20.10.3 ...
    ▪ Generating certificates and keys ...
    ▪ Booting up control plane ...
    ▪ Configuring RBAC rules ...
🔎  Verifying Kubernetes components...
    ▪ Using image gcr.io/k8s-minikube/storage-provisioner:v4
🌟  Enabled addons: storage-provisioner, default-storageclass
🏄  Done! kubectl is now configured to use "minikube" cluster and "default" namespace by default
$ 
$ 
$ 
$ kubectl create namespace kafka
namespace/kafka created
$ 
$ 
$ 
$ kubectl create -f 'https://strimzi.io/install/latest?namespace=kafka' -n kafka
customresourcedefinition.apiextensions.k8s.io/kafkas.kafka.strimzi.io created
rolebinding.rbac.authorization.k8s.io/strimzi-cluster-operator-entity-operator-delegation created
clusterrolebinding.rbac.authorization.k8s.io/strimzi-cluster-operator created
customresourcedefinition.apiextensions.k8s.io/kafkausers.kafka.strimzi.io created
customresourcedefinition.apiextensions.k8s.io/kafkarebalances.kafka.strimzi.io created
deployment.apps/strimzi-cluster-operator created
customresourcedefinition.apiextensions.k8s.io/kafkamirrormaker2s.kafka.strimzi.io created
clusterrole.rbac.authorization.k8s.io/strimzi-entity-operator created
clusterrole.rbac.authorization.k8s.io/strimzi-cluster-operator-global created
clusterrolebinding.rbac.authorization.k8s.io/strimzi-cluster-operator-kafka-broker-delegation created
rolebinding.rbac.authorization.k8s.io/strimzi-cluster-operator created
clusterrole.rbac.authorization.k8s.io/strimzi-cluster-operator-namespaced created
clusterrolebinding.rbac.authorization.k8s.io/strimzi-cluster-operator-kafka-client-delegation created
clusterrole.rbac.authorization.k8s.io/strimzi-kafka-client created
serviceaccount/strimzi-cluster-operator created
clusterrole.rbac.authorization.k8s.io/strimzi-kafka-broker created
customresourcedefinition.apiextensions.k8s.io/kafkatopics.kafka.strimzi.io created
customresourcedefinition.apiextensions.k8s.io/kafkabridges.kafka.strimzi.io created
customresourcedefinition.apiextensions.k8s.io/kafkaconnectors.kafka.strimzi.io created
customresourcedefinition.apiextensions.k8s.io/kafkaconnects.kafka.strimzi.io created
customresourcedefinition.apiextensions.k8s.io/kafkamirrormakers.kafka.strimzi.io created
configmap/strimzi-cluster-operator created
$ 

$ 


$ 
$ 
$ kubectl apply -f https://strimzi.io/examples/latest/kafka/kafka-persistent-single.yaml -n kafka
kafka.kafka.strimzi.io/my-cluster created
$ kubectl wait kafka/my-cluster --for=condition=Ready --timeout=300s -n kafka 
kafka.kafka.strimzi.io/my-cluster condition met
$ 
$ 
$ 
$ kubectl create namespace hbi
namespace/hbi created
$ 
$ 
$ 
$ kubectl -n hbi create -f hbi-secret-quay.yaml 
secret/quay-secret created
$ 
$ 
$ 
$ kubectl -n hbi create -f hbi-secret-rhreg.yaml
secret/rhreg-secret created
$ 
$ 
$ 
$ kubectl -n hbi patch serviceaccount default -p '{"imagePullSecrets": [{"name": "quay-secret"}]}'
serviceaccount/default patched
$ 
$ 
$ 
$ kubectl -n hbi patch serviceaccount default -p '{"imagePullSecrets": [{"name": "rhreg-secret"}]}'
serviceaccount/default patched
$ 
$ 
$ 
$ kubectl -n hbi create -f hbi-pvc.yaml
persistentvolumeclaim/inventory-db created
$ 
$ 
$ 
$ kubectl -n hbi create -f hbi-db-deployment.yaml
deployment.apps/inventory-db created
$ 
$ 
$ 
$ kubectl -n hbi create -f hbi-db-service.yaml
service/inventory-db created
$ 
$ 
$ 
$ kubectl port-forward svc/inventory-db 5432:5432 -n hbi >/dev/null 2>&1 &
[1] 9213
$ 
$ 
$ 
$ kubectl -n hbi create -f hbi-mq-deployment.yaml
deployment.apps/inventory-mq-p1 created
$ kubectl -n hbi create -f hbi-mq-service.yaml
service/inventory-mq created
$ kubectl -n hbi create -f hbi-insights-inventory.yaml
deployment.apps/insights-inventory created
$ kubectl -n hbi create -f hbi-insights-inventory-service.yaml
service/insights-inventory created
$ 
